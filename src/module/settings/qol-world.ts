import { MODULENAME, updateHooks } from "../xdy-pf2e-workbench.js";
import { SettingsMenuPF2eWorkbench } from "./menu.js";

export class WorkbenchQolWorldSettings extends SettingsMenuPF2eWorkbench {
    static override namespace = "qolWorldSettings";

    public static override get settings(): Record<string, SettingRegistration> {
        return {
            npcScaler: {
                name: `${MODULENAME}.SETTINGS.npcScaler.name`,
                hint: `${MODULENAME}.SETTINGS.npcScaler.hint`,
                scope: "world",
                config: true,
                default: false,
                type: Boolean,
                onChange: () => updateHooks(),
                requiresReload: true,
            },
            npcRoller: {
                name: `${MODULENAME}.SETTINGS.npcRoller.name`,
                hint: `${MODULENAME}.SETTINGS.npcRoller.hint`,
                scope: "world",
                config: true,
                default: false,
                type: Boolean,
                onChange: () => updateHooks(),
                requiresReload: true,
            },
            castPrivateSpell: {
                name: `${MODULENAME}.SETTINGS.castPrivateSpell.name`,
                hint: `${MODULENAME}.SETTINGS.castPrivateSpell.hint`,
                scope: "world",
                config: true,
                default: false,
                type: Boolean,
                onChange: () => updateHooks(),
                requiresReload: true,
            },
            castPrivateSpellAutoRevealIfKnown: {
                name: `${MODULENAME}.SETTINGS.castPrivateSpellAutoRevealIfKnown.name`,
                hint: `${MODULENAME}.SETTINGS.castPrivateSpellAutoRevealIfKnown.hint`,
                scope: "world",
                config: true,
                default: true,
                type: Boolean,
                onChange: () => updateHooks(),
                requiresReload: true,
            },
            castPrivateSpellAutoRevealPartyMembersThatKnowSpell: {
                name: `${MODULENAME}.SETTINGS.castPrivateSpellAutoRevealPartyMembersThatKnowSpell.name`,
                hint: `${MODULENAME}.SETTINGS.castPrivateSpellAutoRevealPartyMembersThatKnowSpell.hint`,
                scope: "world",
                config: true,
                default: false,
                type: Boolean,
                onChange: () => updateHooks(),
                requiresReload: true,
            },
            castPrivateSpellHideName: {
                name: `${MODULENAME}.SETTINGS.castPrivateSpellHideName.name`,
                hint: `${MODULENAME}.SETTINGS.castPrivateSpellHideName.hint`,
                scope: "world",
                config: true,
                default: false,
                type: Boolean,
                onChange: () => updateHooks(),
                requiresReload: true,
            },
            castPrivateSpellAlwaysFor: {
                name: `${MODULENAME}.SETTINGS.castPrivateSpellAlwaysFor.name`,
                hint: `${MODULENAME}.SETTINGS.castPrivateSpellAlwaysFor.hint`,
                scope: "world",
                config: true,
                default: "none",
                type: String,
                choices: {
                    none: game.i18n.localize(`${MODULENAME}.SETTINGS.castPrivateSpellAlwaysFor.none`),
                    nonAllies: game.i18n.localize(`${MODULENAME}.SETTINGS.castPrivateSpellAlwaysFor.nonAllies`),
                    nonPartymembers: game.i18n.localize(
                        `${MODULENAME}.SETTINGS.castPrivateSpellAlwaysFor.nonPartymembers`,
                    ),
                    npcs: game.i18n.localize(`${MODULENAME}.SETTINGS.castPrivateSpellAlwaysFor.npcs`),
                },
                onChange: () => updateHooks(),
                requiresReload: true,
            },
            castPrivateSpellWithPublicMessage: {
                name: `${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessage.name`,
                hint: `${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessage.hint`,
                scope: "world",
                config: true,
                default: false,
                type: Boolean,
                onChange: () => updateHooks(),
                requiresReload: true,
            },
            castPrivateSpellWithPublicMessageShowToGM: {
                name: `${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessageShowToGM.name`,
                hint: `${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessageShowToGM.hint`,
                scope: "world",
                config: true,
                default: false,
                type: Boolean,
                onChange: () => updateHooks(),
                requiresReload: true,
            },
            castPrivateSpellWithPublicMessageShowTraits: {
                name: `${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessageShowTraits.name`,
                hint: `${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessageShowTraits.hint`,
                scope: "world",
                config: true,
                default: false,
                type: Boolean,
                onChange: () => updateHooks(),
                requiresReload: true,
            },
            tokenAnimation: {
                name: `${MODULENAME}.SETTINGS.tokenAnimation.name`,
                hint: `${MODULENAME}.SETTINGS.tokenAnimation.hint`,
                scope: "world",
                config: true,
                default: false,
                type: Boolean,
                onChange: () => updateHooks(),
                requiresReload: true,
            },
            tokenAnimationSpeed: {
                name: `${MODULENAME}.SETTINGS.tokenAnimationSpeed.name`,
                hint: `${MODULENAME}.SETTINGS.tokenAnimationSpeed.hint`,
                scope: "world",
                config: true,
                default: 6,
                type: Number,
                onChange: () => updateHooks(),
                requiresReload: true,
            },
            playerFeatsPrerequisiteHint: {
                name: `${MODULENAME}.SETTINGS.playerFeatsPrerequisiteHint.name`,
                hint: `${MODULENAME}.SETTINGS.playerFeatsPrerequisiteHint.hint`,
                scope: "world",
                config: true,
                default: false,
                type: Boolean,
                onChange: () => updateHooks(),
            },
            playerFeatsRarityColour: {
                name: `${MODULENAME}.SETTINGS.playerFeatsRarityColour.name`,
                hint: `${MODULENAME}.SETTINGS.playerFeatsRarityColour.hint`,
                scope: "world",
                config: true,
                default: false,
                type: Boolean,
                onChange: () => updateHooks(),
            },
            playerCraftingRarityColour: {
                name: `${MODULENAME}.SETTINGS.playerCraftingRarityColour.name`,
                hint: `${MODULENAME}.SETTINGS.playerCraftingRarityColour.hint`,
                scope: "world",
                config: true,
                default: false,
                type: Boolean,
                onChange: () => updateHooks(),
            },
            playerSpellsRarityColour: {
                name: `${MODULENAME}.SETTINGS.playerSpellsRarityColour.name`,
                hint: `${MODULENAME}.SETTINGS.playerSpellsRarityColour.hint`,
                scope: "world",
                config: true,
                default: false,
                type: Boolean,
                onChange: () => updateHooks(),
            },
        };
    }

    static override readonly hidelist = {
        castPrivateSpell: {
            list: [
                "castPrivateSpellAutoRevealIfKnown",
                "castPrivateSpellAutoRevealPartyMembersThatKnowSpell",
                "castPrivateSpellAutoRevealPartyMembersThatKnowSpell",
                "castPrivateSpellHideName",
                "castPrivateSpellAlwaysFor",
            ],
        },
        castPrivateSpellWithPublicMessage: {
            list: ["castPrivateSpellWithPublicMessageShowToGM", "castPrivateSpellWithPublicMessageShowTraits"],
        },
    };
}
